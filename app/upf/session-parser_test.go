package upf_test

import (
	"net/netip"
	"testing"

	"github.com/usnistgov/ndn-dpdk/app/upf"
	"github.com/wmnsk/go-pfcp/ie"
	"github.com/wmnsk/go-pfcp/message"
)

// PFCP session related messages from different SMF implementations:
//
//	phoenix: Open5GCore c52b6d04
//	free5gc: free5GC v3.4.2
//	oai: OAI-CN5G-SMF v2.0.1, NRF disabled
//	open5gs: Open5GS v2.7.2
const (
	pfcpPhoenixEst0 = "2132010d000000000000000000000300003c000500ac19c30d0039000d020000000502000003ac19c30d0001003e003800020456001d0004000000ff000200170014000100001500090110000003ac19c407007c000101005f000100006c00040000006e006d0004000004560001003e0038000203f2001d0004000000ff0002001c001400010100160005047663746c005d0005060a8d0002007c000101006c00040000000a006d0004000003f200030025006c00040000006e002c0001020004000f002a000101001600066e365f74756e005800010100070012006d000400000456007c000101001900010000070012006d0004000003f2007c00010100190001000055000500580001010071000101"
	pfcpPhoenixMod0 = "2134003f0000000000000001000005000003002f006c00040000000a002c00010200040019002a000100001600026e330054000a010000000003ac19c40e0058000101"
	pfcpPhoenixEst1 = "2132010d000000000000000000000400003c000500ac19c30d0039000d020000000702000004ac19c30d0001003e003800020456001d0004000000ff000200170014000100001500090110000004ac19c407007c000101005f000100006c00040000006e006d0004000004560001003e0038000203f2001d0004000000ff0002001c001400010100160005047663746c005d0005060a8d0003007c000101006c00040000000a006d0004000003f200030025006c00040000006e002c0001020004000f002a000101001600066e365f74756e005800010100070012006d000400000456007c000101001900010000070012006d0004000003f2007c00010100190001000055000500580001010071000101"
	pfcpPhoenixMod1 = "2134003f0000000000000002000006000003002f006c00040000000a002c00010200040019002a000100001600026e330054000a010000000004ac19c40e0058000101"
	pfcpPhoenixEst2 = "2132010d000000000000000000000b00003c000500ac19c30d0039000d020000000b02000007ac19c30d0001003e003800020456001d0004000000ff000200170014000100001500090110000007ac19c407007c000101005f000100006c00040000006e006d0004000004560001003e0038000203f2001d0004000000ff0002001c001400010100160005047663746c005d0005060a8d0001007c000101006c00040000000a006d0004000003f200030025006c00040000006e002c0001020004000f002a000101001600066e365f74756e005800010100070012006d000400000456007c000101001900010000070012006d0004000003f2007c00010100190001000055000500580001010071000101"
	pfcpPhoenixMod2 = "2134003f000000000000000300000c000003002f006c00040000000a002c00010200040019002a000100001600026e330054000a010000000007ac19c40e0058000101"
	pfcpPhoenixEst3 = "2132010d000000000000000000000d00003c000500ac19c30d0039000d020000000d02000009ac19c30d0001003e003800020456001d0004000000ff000200170014000100001500090110000009ac19c407007c000101005f000100006c00040000006e006d0004000004560001003e0038000203f2001d0004000000ff0002001c001400010100160005047663746c005d0005060a8d0004007c000101006c00040000000a006d0004000003f200030025006c00040000006e002c0001020004000f002a000101001600066e365f74756e005800010100070012006d000400000456007c000101001900010000070012006d0004000003f2007c00010100190001000055000500580001010071000101"
	pfcpPhoenixMod3 = "2134003f000000000000000400000e000003002f006c00040000000a002c00010200040019002a000100001600026e330054000a010000000009ac19c40e0058000101"
	pfcpFree5gcEst  = "233201d0000000000000000000000500003c000500ac19c3130039000d020000000000000002ac19c31300010063003800020001001d0004000000ff000200240014000100001500090100000004ac19c20700160005047663746c005d0005020a8d0001005f000100006c00040000000100510004000000010051000400000002006d000400000002006d00040000000100010051003800020002001d0004000000ff00020017001400010100160005047663746c005d0005060a8d0001006c00040000000200510004000000010051000400000002006d000400000002006d0004000000010003001f006c000400000001002c0001020004000e002a00010100160005047663746c00030016006c000400000002002c00010200040005002a000100000600350051000400000001003e000102002500020300004000040000000a001f00110600000000000003e800000000000003e80064000111000600350051000400000002003e000102002500020300004000040000000a001f00110600000000000003e800000000000003e8006400011000070020006d0004000000010019000100001a000a0000030d4000000186a0007c00010000070012006d0004000000020019000100007c0001010071000101"
	pfcpFree5gcMod  = "233400980000000000000001000007c00039000d020000000000000002ac19c31300090041003800020002001d0004000000ff00020017001400010100160005047663746c005d0005060a8d0001006c00040000000200510004000000010051000400000002000a0032006c000400000002002c000102000b0021002a00010000160005047663746c0054000a010000000002ac19c2140031000100"
	pfcpOaiEst      = "213200a70000000000000002bfd1d300003c000500ac19c40a0039000d020000000000000002ac19c40a00010052003800020001001d000400000000000200330014000100001500090100000002ac19c3070016000f06616363657373036f6169036f7267005d0005020a8d0002007c000109005f000100006c00040000000100030027006c000400000001002c00010200040016002a0001010016000d04636f7265036f6169036f7267"
	pfcpOaiMod      = "213400840000000000000001bfd1d50000010039003800020002001d0004000000000002001f00140001010016000d04636f7265036f6169036f7267005d0005060a8d0002006c00040000000200030037006c000400000002002c00010200040026002a0001000016000f06616363657373036f6169036f72670054000a010000000002ac19c30e"
	pfcpOpen5gsEst  = "2132024a000000000000000000000400003c000500ac19c20d0039000d02000000000000035dac19c20d00010040003800020001001d0004000000ff0002001600140001010016000403613030005d0005060a800001006c0004000000010051000400000001006d00040000000100010049003800020002001d0004000000ff000200210014000100001500020f050016000403613030005d0005020a800001007c000101005f00020001006c000400000002006d00040000000100010039003800020003001d0004000003e800020012001400010300150001070016000403613030005f000100006c000400000001006d00040000000100010069003800020004001d0004000000010002004a0014000100001500020f0500160004036130300017002e0100002a7065726d6974206f75742035382066726f6d20666630323a3a322f31323820746f2061737369676e6564007c000101005f000100006c00040000000300030013006c000400000001002c00020c0000580001010003001f006c000400000002002c000202000004000d002a00010100160004036130300003002d006c000400000003002c000202000004001b002a00010300160004036130300054000a010000000001ac19c20d000600210051000400000001003e00010200250003020000001f000901000000000640000000070020006d0004000000010019000100001a000a00000f424000000f4240007c0001010055000500580001010071000101008d0013030800017100550500f0083407181652181615009f0004036130300101000480000000"
	pfcpOpen5gsMod  = "2134003d000000000000046f00000500000a002d006c000400000001002c00020200000b001b002a00010000160004036130300054000a010000000001ac19c30f"
)

var parseSessionLocalIP = netip.MustParseAddr("192.168.3.2")

func parseSession(t *testing.T, est, mod string) (sess upf.SessionParser, estRsp, modRsp []*ie.IE) {
	assert, require := makeAR(t)
	var e error

	nChosenTeids := 0
	sess.ChooseTeid = func(fTEID *ie.FTEIDFields) *ie.FTEIDFields {
		assert.True(fTEID.HasCh())

		teid := uint32(0x8F000000)
		if fTEID.HasChID() {
			teid |= uint32(fTEID.ChooseID) << 8
		} else {
			nChosenTeids++
			teid |= uint32(nChosenTeids)
		}

		rsp := ie.NewFTEIDFields(0, teid, parseSessionLocalIP.AsSlice(), nil, 0)
		rsp.SetIPv4Flag()
		return rsp
	}

	estRsp, e = sess.EstablishmentRequest(parsePFCP(est).(*message.SessionEstablishmentRequest), nil)
	require.NoError(e)
	modRsp, e = sess.ModificationRequest(parsePFCP(mod).(*message.SessionModificationRequest), nil)
	require.NoError(e)
	return
}

func TestSessionParserPhoenix(t *testing.T) {
	assert, require := makeAR(t)

	sess, _, _ := parseSession(t, pfcpPhoenixEst0, pfcpPhoenixMod0)

	loc, ok := sess.LocatorFields()
	require.True(ok)
	assert.EqualValues(0x10000003, loc.UlTEID)
	assert.EqualValues(0x00000003, loc.DlTEID)
	assert.EqualValues(1, loc.UlQFI)
	assert.EqualValues(1, loc.DlQFI)
	assert.EqualValues(netip.MustParseAddr("172.25.196.14"), loc.RemoteIP)
	assert.EqualValues(netip.MustParseAddr("10.141.0.2"), loc.InnerRemoteIP)
}

func TestSessionParserFree5gc(t *testing.T) {
	assert, require := makeAR(t)

	sess, _, _ := parseSession(t, pfcpFree5gcEst, pfcpFree5gcMod)

	loc, ok := sess.LocatorFields()
	require.True(ok)
	assert.EqualValues(0x00000004, loc.UlTEID)
	assert.EqualValues(0x00000002, loc.DlTEID)
	assert.EqualValues(1, loc.UlQFI)
	assert.EqualValues(1, loc.DlQFI)
	assert.EqualValues(netip.MustParseAddr("172.25.194.20"), loc.RemoteIP)
	assert.EqualValues(netip.MustParseAddr("10.141.0.1"), loc.InnerRemoteIP)
}

func TestSessionParserOai(t *testing.T) {
	assert, require := makeAR(t)

	sess, _, _ := parseSession(t, pfcpOaiEst, pfcpOaiMod)

	loc, ok := sess.LocatorFields()
	require.True(ok)
	assert.EqualValues(0x00000002, loc.UlTEID)
	assert.EqualValues(0x00000002, loc.DlTEID)
	assert.EqualValues(9, loc.UlQFI)
	assert.EqualValues(9, loc.DlQFI)
	assert.EqualValues(netip.MustParseAddr("172.25.195.14"), loc.RemoteIP)
	assert.EqualValues(netip.MustParseAddr("10.141.0.2"), loc.InnerRemoteIP)
}

func TestSessionParserOpen5gs(t *testing.T) {
	assert, require := makeAR(t)

	sess, estRsp, modRsp := parseSession(t, pfcpOpen5gsEst, pfcpOpen5gsMod)

	loc, ok := sess.LocatorFields()
	require.True(ok)
	assert.EqualValues(0x8F000500, loc.UlTEID)
	assert.EqualValues(0x00000001, loc.DlTEID)
	assert.EqualValues(1, loc.UlQFI)
	assert.EqualValues(1, loc.DlQFI)
	assert.EqualValues(netip.MustParseAddr("172.25.195.15"), loc.RemoteIP)
	assert.EqualValues(netip.MustParseAddr("10.128.0.1"), loc.InnerRemoteIP)

	estCreatedPDRs := gatherCreatedPDRs(t, estRsp)
	assert.Equal([]createdPDR{
		{2, loc.UlTEID, parseSessionLocalIP},
		{3, 0x8F000001, parseSessionLocalIP},
		{4, loc.UlTEID, parseSessionLocalIP},
	}, estCreatedPDRs)

	modCreatedPDRs := gatherCreatedPDRs(t, modRsp)
	assert.Len(modCreatedPDRs, 0)
}
