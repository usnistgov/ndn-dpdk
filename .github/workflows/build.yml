---
name: build
'on':
  push:
  pull_request:
permissions:
  packages: write
env:
  COREPACK_INTEGRITY_KEYS: 0
jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      NDNDPDK_MK_THREADSLEEP: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - id: deps
        name: Install dependencies
        run: |
          docs/ndndpdk-depends.sh -y --node=0 --go=0 --dpdk=0 --spdk=0
          echo MESONVER=$(meson --version) >>$GITHUB_OUTPUT
          awk -vFS='=' '
            NF==2 && ($1=="DFLT_DPDKVER" || $1=="DFLT_SPDKVER") { print substr($1,6) "=" $2 }
          ' docs/ndndpdk-depends.sh >>$GITHUB_OUTPUT
          sudo update-alternatives --install /usr/bin/go go $(command -v go) 1
      - name: Cache DPDK and SPDK
        uses: actions/cache@v4
        with:
          path: ~/setup-dpdk
          key: ${{ steps.deps.outputs.MESONVER }}_20250324
      - uses: yoursunny/setup-dpdk@main
        with:
          dpdk-version: ${{ steps.deps.outputs.DPDKVER }}
          spdk-version: ${{ steps.deps.outputs.SPDKVER }}
      - name: Build NDN-DPDK in debug mode
        run: |
          corepack pnpm install
          make
          sudo make install
          for D in sample/activate sample/benchmark sample/status; do
            pushd $D
            corepack pnpm install
            popd
          done
          sudo make uninstall
      - name: Check code style
        run: |
          make lint
          git diff --exit-code
      - name: Run required unit tests
        run: |
          echo 'bdev|disk|ethface|fetch|fileserver|fwdp|memifface|memiftransport|tgconsumer|tgproducer' >~/acceptable-failures.txt
          MK_GOTEST_FILTER="/$(cat ~/acceptable-failures.txt)/ d" make test
      - name: Run optional unit tests
        run: |
          MK_GOTEST_FILTER="/$(cat ~/acceptable-failures.txt)/! d" make test
        continue-on-error: true
      - name: Build docs
        run: make doxygen
      - name: Build docs site
        run: mk/netlify.sh
        if: ${{ github.repository == 'yoursunny/ndn-dpdk' && github.event_name == 'push' }}
      - name: Deploy docs site
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: ./build/netlify/
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: ${{ github.sha }} ${{ github.run_id }}
          enable-pull-request-comment: false
          enable-commit-comment: false
          enable-commit-status: false
          enable-github-deployment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: a0fbfa66-eecb-46d0-9e0b-093ddd1d0fad
        if: ${{ github.repository == 'yoursunny/ndn-dpdk' && github.event_name == 'push' }}
  docker:
    runs-on: ubuntu-22.04
    steps:
      - id: prepare
        name: Prepare build
        run: |
          echo TAG=ghcr.io/${{ github.repository_owner }}/ndn-dpdk >>$GITHUB_OUTPUT
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event_name == 'push' }}
      - name: Setup Docker pull through cache
        run: |
          [[ -f /etc/docker/daemon.json ]] || sudo sh -c '
            mkdir -p /etc/docker
            echo {} >/etc/docker/daemon.json
          '
          sudo yq -i '.registry-mirrors = ["https://mirror.gcr.io"]' /etc/docker/daemon.json
      - uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.prepare.outputs.TAG }}
          build-args: | # cannot have bash escape patterns
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
            APT_PKGS=libibverbs-dev
            DEPENDS_ARGS=--arch=x86-64-v3 --dpdk-opts={"disable_drivers":"common/cnxk,common/dpaax,net/bnxt"}
            MAKE_ENV=GOAMD64=v3 NDNDPDK_MK_RELEASE=1 NDNDPDK_MK_THREADSLEEP=1
          push: ${{ github.event_name == 'push' }}
      - name: Show image size
        run: docker image inspect -f '{{.Size}}' ${{ steps.prepare.outputs.TAG }}
      - name: List files in image
        run: docker run --rm ${{ steps.prepare.outputs.TAG }} find /usr/local
  library:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install TinyGo
        run: |
          wget -nv https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VERSION}/tinygo_${TINYGO_VERSION}_amd64.deb
          sudo dpkg -i tinygo_${TINYGO_VERSION}_amd64.deb
        working-directory: /tmp
        env:
          TINYGO_VERSION: "0.37.0"
      - name: Build for Linux without cgo
        run: |
          go build -v -o /dev/null ./ndn/...
          go build -v -o /dev/null ./cmd/ndndpdk-ctrl
          go build -v -o /dev/null ./cmd/ndndpdk-godemo
        env:
          CGO_ENABLED: 0
      - name: Build for Windows without cgo
        run: |
          go build -v -o /dev/null ./ndn/...
        env:
          CGO_ENABLED: 0
          GOOS: windows
      - name: Build with TinyGo
        run: |
          tinygo build -o /dev/null -target=wasm ./ndn/ndntestenv/tiny
          make -C sample/wasm
