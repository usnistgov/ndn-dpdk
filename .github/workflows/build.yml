---
# yamllint disable rule:line-length rule:truthy

name: build
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        compiler:
          - gcc-7
          - gcc-10
          - clang-11
      fail-fast: false
    env:
      CC: ${{ matrix.compiler }}
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.17
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - id: compilers
        name: install compilers and tools
        run: |
          wget https://apt.llvm.org/llvm.sh
          sudo bash ./llvm.sh 11
          sudo apt-get install $CC clang-format-11 doxygen gcc-multilib libelf-dev libpcap-dev liburcu-dev linux-libc-dev python3-pip python3-setuptools python3-wheel
          sudo update-alternatives --remove-all go || true
          sudo update-alternatives --install /usr/bin/go go $(which go) 1
          go install honnef.co/go/tools/cmd/staticcheck@latest
          sudo pip3 install 'meson >=0.55, <0.60'
          echo '::set-output name=meson::'$(meson --version)
      - name: install uBPF
        run: |
          mkdir -p $HOME/ubpf
          cd $HOME/ubpf
          curl -sfLS https://github.com/iovisor/ubpf/archive/$UBPFCOMMIT.tar.gz | tar -xz --strip-components=1
          cd vm
          make
          sudo make install
        env:
          UBPFCOMMIT: 9eb26b4bfdec6cafbf629a056155363f12cec972
      - name: install liburing
        run: |
          mkdir -p $HOME/liburing
          cd $HOME/liburing
          curl -sfLS https://github.com/axboe/liburing/archive/$URINGVER.tar.gz | tar -xz --strip-components=1
          ./configure --prefix=/usr/local
          make
          sudo make install
        env:
          CXX: false
          URINGVER: liburing-2.1
      - uses: actions/cache@v2
        with:
          path: |
            ~/setup-dpdk
          key: ${{ matrix.compiler }}_${{ steps.compilers.outputs.meson }}_20211007
      - uses: yoursunny/setup-dpdk@main
        with:
          dpdk-version: '21.08'
          spdk-version: '21.07'
          target-arch: haswell
      - uses: actions/checkout@v2
      - name: build NDN-DPDK in debug mode
        run: |
          npm install
          make
          sudo make install
          for D in docs/activate docs/benchmark; do
            pushd $D
            npm install
            popd
          done
          sudo make uninstall
        env:
          NDNDPDK_MK_THREADSLEEP: 1
      - name: run unit tests
        run: |
          MK_GOTEST_FILTER="/${TEST_ACCEPTABLE_FAILURES}/ d" make test
          MK_GOTEST_FILTER="/${TEST_ACCEPTABLE_FAILURES}/! d" make test || true
        env:
          TEST_ACCEPTABLE_FAILURES: bdev|diskstore|ethface|fetch|fileserver|fwdp|memiftransport|tgconsumer|tgproducer
          NDNDPDK_MK_THREADSLEEP: 1
      - name: check code style
        run: |
          make lint
          git diff --exit-code
      - name: build docs
        run: make doxygen
      - name: build docs site
        run: bash mk/netlify.sh
        if: ${{ matrix.compiler == 'gcc-10' && github.repository == 'yoursunny/ndn-dpdk' && github.event_name == 'push' }}
      - name: deploy docs site
        uses: South-Paw/action-netlify-deploy@v1.2.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          netlify-auth-token: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          netlify-site-id: a0fbfa66-eecb-46d0-9e0b-093ddd1d0fad
          build-dir: ./build/netlify/
        if: ${{ matrix.compiler == 'gcc-10' && github.repository == 'yoursunny/ndn-dpdk' && github.event_name == 'push' }}
  docker:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            MAKE_ENV=NDNDPDK_MK_RELEASE=1
  library:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.17
      - name: install TinyGo
        run: |
          wget https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VERSION}/tinygo_${TINYGO_VERSION}_amd64.deb
          sudo dpkg -i tinygo_${TINYGO_VERSION}_amd64.deb
        working-directory: /tmp
        env:
          TINYGO_VERSION: "0.20.0"
      - uses: actions/checkout@v2
      - name: build for Linux without cgo
        run: |
          go build -v -o /dev/null ./ndn/...
          go build -v -o /dev/null ./cmd/ndndpdk-ctrl
          go build -v -o /dev/null ./cmd/ndndpdk-godemo
        env:
          CGO_ENABLED: 0
      - name: build for Windows without cgo
        run: |
          go build -v -o /dev/null ./ndn/...
        env:
          CGO_ENABLED: 0
          GOOS: windows
      - name: build with TinyGo
        run: |
          tinygo build -o /dev/null -target=wasm ./ndn/ndntestenv/tiny
